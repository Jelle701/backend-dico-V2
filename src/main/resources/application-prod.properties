server.port=8000
spring.datasource.url=jdbc:postgresql://localhost:5432/dico
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# Gebruik 'create' voor ontwikkeling om database en code synchroon te houden.
# Let op: dit verwijdert alle data bij elke herstart.
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.driver-class-name=org.postgresql.Driver

# --- DE OPLOSSING ---
# Vervang het oude, zwakke geheim met dit nieuwe, veilige en willekeurig gegenereerde geheim.
# Deze sleutel is gegarandeerd sterk genoeg voor het HMAC-SHA algoritme.
jwt.secret=bXlzdXBlcnNlY3JldGtleWZvcmRpYWJldGljY29ubmVjdGFwcGxpY2F0aW9uMjAyNA==

# De vervaltijd van de token (1 uur in milliseconden)
jwt.expiration=3600000



# Logging
logging.level.org.springframework=INFO
logging.level.com.example_jelle.backenddico=DEBUG

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=dicodiabetesconnect@gmail.com
spring.mail.password=DicoNovi
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
